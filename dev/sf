#!/usr/bin/env python3.7

import sys
import re
import os
import xml.etree.ElementTree as ET
from abc import ABC, abstractmethod
from dataclasses import dataclass, field
from typing import List
import shlex
import argparse
import asyncio
import logging


COMMANDS = {}

def command(fn):
  COMMANDS[fn.__name__] = fn
  return fn


class UnmappablePathError(ValueError):
  pass

class BuildEnvStartError(RuntimeError):
  pass


async def process_stream(stream, dest):
  user_dir = os.path.expanduser(b"~/")

  while True:
    buf = await stream.readline()
    if not buf:
      break

    buf = buf.replace(b'/home/mersdk/share/', user_dir)

    dest.write(buf)
    dest.flush()


async def run_cmd(program: str, *args: str):
    proc = await asyncio.create_subprocess_exec(
      program, *args,
      stdout=asyncio.subprocess.PIPE,
      stderr=asyncio.subprocess.PIPE
    )
    await proc.wait()
    return proc.returncode, await proc.stdout.read(), await proc.stderr.read()


class BuildRunner(ABC):
  @abstractmethod
  async def run(self,
                args: List[str],
                local_dir: str = None,
                terminal: bool = False,
                replace_paths: bool = True) -> bool:
    raise NotImplementedError()

  @abstractmethod
  async def start(self) -> None:
    raise NotImplementedError()

  @abstractmethod
  async def stop(self) -> None:
    raise NotImplementedError()


class VirtualMachine(BuildRunner):

  logger = logging.getLogger(__qualname__)

  HOME_MOUNT = "/home/mersdk/share"

  def __init__(self, sdk: "SailfishSdk"):
    self.sdk = sdk
    self.ssh_base_args = [
      "ssh",
      "mersdk@127.0.0.1",
      "-p", "2222",
      "-i", os.path.join(
        self.sdk.install_folder, "vmshare/ssh/private_keys/engine/mersdk"),
      "-o", "UserKnownHostsFile=/dev/null",
      "-o", "StrictHostKeyChecking=no",
      "-q",
    ]

  async def run(
          self,
          args: List[str],
          local_dir: str = None,
          terminal: bool = False,
          replace_paths: bool = True) -> int:
    await self.start()

    self.logger.debug(f"RUN SSH: args={args}")

    if args:
      cmdln = " ".join([shlex.quote(arg) for arg in args])
    else:
      # TODO: move logic out of here
      cmdln = "bash"
      terminal = True
      replace_paths = False

    if local_dir is not None:
      sdk_dir = local2sdk(self.HOME_MOUNT, local_dir)
      cmdln = f"cd {shlex.quote(sdk_dir)} && ({cmdln})"

    ssh_extra_args = []
    if terminal:
      ssh_extra_args.append("-t")

    proc = await asyncio.create_subprocess_exec(
      *self.ssh_base_args,
      *ssh_extra_args,
      cmdln,
      stdout=asyncio.subprocess.PIPE if replace_paths else None,
      stderr=asyncio.subprocess.PIPE if replace_paths else None
    )

    if replace_paths:
      await asyncio.gather(
        process_stream(proc.stderr, sys.stdout.buffer),
        process_stream(proc.stdout, sys.stderr.buffer))

    await proc.wait()
    return proc.returncode

  async def is_vm_running(self) -> bool:
    errcode, stdout, stderr = await run_cmd("VBoxManage", "list", "runningvms")
    if errcode != 0:
      raise BuildEnvStartError("Failed to list runnings VMs", stderr.decode())

    return re.search(br'^"Sailfish OS Build Engine" {', stdout) is not None

  async def start(self) -> None:
    if await self.is_vm_running():
      print("VM already running")
      return

    print("Start VM...", end="", flush=True)

    errcode, _stdout, stderr = await run_cmd(
      "VBoxManage", "startvm", "Sailfish OS Build Engine", "--type", "headless")
    if errcode != 0:
      raise BuildEnvStartError("Failed to start VM", stderr.decode())

    await asyncio.sleep(1.0)

    if not await self.is_vm_running():
      raise BuildEnvStartError("Unstable start of VM")

    print("[✔]️\n", end="", flush=True)

  async def stop(self) -> None:
    if not await self.is_vm_running():
      return

    errcode, _stdout, stderr = await run_cmd(
      "VBoxManage", "controlvm", "Sailfish OS Build Engine", "acpipowerbutton")
    if errcode != 0:
      raise BuildEnvStartError("Failed to stop VM", stderr.decode())


class Docker(BuildRunner):
  HOME_MOUNT = "/home/nemo/share"

  logger = logging.getLogger(__qualname__)

  async def run(
          self,
          args: List[str],
          local_dir: str = None,
          terminal: bool = False,
          replace_paths: bool = True) -> int:
    if not args:
      args = ["bash"]
      terminal = True
      replace_paths = False

    if local_dir is not None:
      sdk_dir = local2sdk(self.HOME_MOUNT, local_dir)
      cmdln = f"cd {shlex.quote(sdk_dir)}" \
              f" && ({' '.join([shlex.quote(arg) for arg in args])})"
      args = ["bash", "-c", cmdln]

    docker_extra_args = []
    if terminal:
      docker_extra_args.append("-it")

    proc = await asyncio.create_subprocess_exec(
      "docker", "container", "run", *docker_extra_args,
      "--volume", f'{os.path.expanduser("~")}:/home/nemo/share',
      "--rm",
      "r1tschy/sailfishos-platform-sdk:latest",
      *args,
      stdout=asyncio.subprocess.PIPE if replace_paths else None,
      stderr=asyncio.subprocess.PIPE if replace_paths else None
    )

    if replace_paths:
      await asyncio.gather(
        process_stream(proc.stderr, sys.stdout.buffer),
        process_stream(proc.stdout, sys.stderr.buffer))

    await proc.wait()
    return proc.returncode


  async def start(self) -> None:
    pass

  async def stop(self) -> None:
    pass


@dataclass
class SailfishSdk:
  install_folder: str


def _ssh_base_args_for_device(sdk: SailfishSdk, name: str):
  devices_xml = os.path.join(sdk.install_folder, "vmshare", "devices.xml")
  root = ET.parse(devices_xml)
  device = root.find(f"./device[@name='{name}']")
  if device is None:
    raise ValueError(f"Device `{name}` does not exist")
  return [
    "ssh",
    f"nemo@{device.find('./ip').text}",
    "-p", device.find('./sshport').text,
    "-i", os.path.join(
      sdk.install_folder,
      "vmshare",
      device.find('./sshkeypath').text),
    "-q",
  ]


async def run_on_device(
    sdk: SailfishSdk,
    args: List[str],
    device: str,
    terminal: bool = False,
) -> int:
  cmdln = " ".join([shlex.quote(arg) for arg in args])

  ssh_extra_args = []
  if terminal:
    ssh_extra_args.append("-t")

  proc = await asyncio.create_subprocess_exec(
    *_ssh_base_args_for_device(sdk, device),
    *ssh_extra_args,
    cmdln,
  )
  try:
    await proc.wait()
  finally:
    try:
      proc.terminate()
    except ProcessLookupError:
      pass
  return proc.returncode


def get_sdk_install_folder():
  mersdk_xml = os.path.expanduser(
    "~/.config/SailfishSDK/qtcreator/libsfdk-buildengines.xml")
  root = ET.parse(mersdk_xml)
  value = root.find(".//data[variable='BuildEngines.InstallDir']/value")
  if value is not None:
      return value.text
  else:
      return os.path.expanduser("~/SailfishOS")


def local2sdk(home_mount: str, path: str) -> str:
  user_dir = os.path.expanduser("~/")
  if path.startswith(user_dir):
    return f'{home_mount}/{path[len(user_dir):]}'
  else:
    raise UnmappablePathError()


@command
async def run(sdk: SailfishSdk, cmdln) -> int:
  parser = argparse.ArgumentParser()
  parser.add_argument("--terminal", "-t",
    action="store_true",
    help="Force pseudo-terminal allocation. This option disables the --replace-paths option.")
  parser.add_argument(
    "--replace-paths", "-p",
    action="store_true",
    help="Convert SDK paths in output to paths in home directory.")
  parser.add_argument(
    "--docker", "-k",
    action="store_true",
    help="Use Docker container instead of Sailfish SDK VM.")
  parser.add_argument("cmd", nargs=argparse.REMAINDER)
  args = parser.parse_args(cmdln)

  replace_paths = args.replace_paths and not args.terminal
  runner = Docker() if args.docker else VirtualMachine(sdk)

  return await runner.run(
    args.cmd,
    local_dir=os.getcwd(),
    terminal=args.terminal,
    replace_paths=replace_paths
  )


@command
async def stop(sdk: SailfishSdk, cmdln) -> int:
  parser = argparse.ArgumentParser()
  _args = parser.parse_args(cmdln)

  await VirtualMachine(sdk).stop()
  return 0


@command
async def build(sdk: SailfishSdk, cmdln) -> int:
  parser = argparse.ArgumentParser()
  parser.add_argument(
    "--target", "-t", help="Sailfish SDK build target", required=True)
  parser.add_argument(
    "--docker", "-k",
    action="store_true",
    help="Use Docker container instead of Sailfish SDK VM.")
  args = parser.parse_args(cmdln)
  runner = Docker() if args.docker else VirtualMachine(sdk)

  return await runner.run(
    ["mb2", "-t", args.target, "build"],
    local_dir=os.getcwd(),
    terminal=False,
    replace_paths=True
  )


@command
async def deploy(sdk: SailfishSdk, cmdln) -> int:
  parser = argparse.ArgumentParser()
  parser.add_argument(
    "--device", "-d", help="Sailfish target device", required=True)
  parser.add_argument(
    "--target", "-t", help="Sailfish SDK build target", required=True)
  parser.add_argument(
    "--docker", "-k",
    action="store_true",
    help="Use Docker container instead of Sailfish SDK VM.")
  args = parser.parse_args(cmdln)
  runner = Docker() if args.docker else VirtualMachine(sdk)

  return await runner.run(
    ["mb2", "--device", args.device, "--target", args.target, "deploy", "--sdk"],
    local_dir=os.getcwd(),
    terminal=False,
    replace_paths=True
  )


@command
async def device(sdk: SailfishSdk, cmdln) -> int:
  parser = argparse.ArgumentParser()
  parser.add_argument(
    "--device", "-d", help="Sailfish target device", required=True)
  parser.add_argument(
    "--qmllive", "-l", help="Start for QmlLive", action="store_true")
  parser.add_argument("cmd", nargs=argparse.REMAINDER)
  args = parser.parse_args(cmdln)

  if args.qmllive:
    args.cmd.insert(0, "qmlliveruntime-sailfish")
    args.cmd.insert(1, "--")

  cmd = [
    "bash", "--login", "-c", " ".join([shlex.quote(arg) for arg in args.cmd])
  ]
  return await run_on_device(
    sdk,
    cmd,
    terminal=True,
    device=args.device
  )


def main():
  logging.basicConfig(level=logging.DEBUG)

  parser = argparse.ArgumentParser()
  parser.add_argument("command", choices=COMMANDS.keys())
  parser.add_argument("args", nargs=argparse.REMAINDER)
  args = parser.parse_args()

  sdk = SailfishSdk(get_sdk_install_folder())
  command = COMMANDS[args.command](sdk, args.args)
  try:
    sys.exit(asyncio.run(command) or 0)
  except UnmappablePathError:
    print(f"Current working directory must be in home directory.", file=sys.stderr)
    sys.exit(1)
  except ValueError as exp:
    print(exp, file=sys.stderr)
    sys.exit(1)
  except KeyboardInterrupt:
    sys.exit(130)


if __name__ == "__main__":
    main()