# 
# Do NOT Edit the Auto-generated Part!
# Generated by: spectacle version 0.27
# 

Name:       harbour-sailfishconnect

# >> macros
# << macros

Summary:    SailfishOS client for KDE-Connect
Version:    0.6
Release:    0.1
Group:      Qt/Qt
License:    LICENSE
URL:        https://github.com/R1tschY/harbour-sailfishconnect
Source0:    %{name}-%{version}.tar.bz2
Source100:  harbour-sailfishconnect.yaml
Requires:   sailfishsilica-qt5 >= 0.10.9
BuildRequires:  pkgconfig(sailfishapp) >= 1.0.2
BuildRequires:  pkgconfig(openssl) >= 1.0.1
BuildRequires:  pkgconfig(Qt5Core)
BuildRequires:  pkgconfig(Qt5Network)
BuildRequires:  pkgconfig(Qt5Sql)
BuildRequires:  pkgconfig(Qt5Qml)
BuildRequires:  pkgconfig(Qt5Quick)
BuildRequires:  pkgconfig(Qt5Test)
BuildRequires:  pkgconfig(Qt5Feedback)
BuildRequires:  pkgconfig(nemonotifications-qt5)
BuildRequires:  pkgconfig(keepalive)
BuildRequires:  cmake
BuildRequires:  ninja
BuildRequires:  gettext
BuildRequires:  python3-devel
%if "%(grep 'VERSION_ID' /etc/os-release | cut -d= -f2)" != "3.1.0.12"
BuildRequires:  python3-setuptools
BuildRequires:  python3-pip
%endif
BuildRequires:  desktop-file-utils

%description
SailfishOS client for KDE-Connect


%prep
%setup -q -n %{name}-%{version}


%build

VENV=$HOME/.venv-conan-%{_target_cpu}
export TARGET_CPU="%{_target_cpu}"
if [ "$TARGET_CPU" == "i486" ]
then  
  GENERATOR="Unix Makefiles"
else
  GENERATOR="Ninja"
fi

# install virtualenv
if [ ! -f ~/.local/bin/virtualenv ] ; then
  python3 -m pip install --no-warn-script-location --user virtualenv
fi

# create virtualenv and install conan
if [ ! -f "$VENV/bin/conan" ] ; then
  ~/.local/bin/virtualenv --python=python3 "$VENV"
  source "$VENV/bin/activate"
  pip install conan
else
  source "$VENV/bin/activate"
fi

# speed up conan remote add
if ! grep -sq sailfishos ~/.conan/remotes.json ; then
  conan remote remove conan-center
  conan remote add -f sailfishos https://api.bintray.com/conan/r1tschy/sailfishos
fi

export SAILFISHCONNECT_PACKAGE_VERSION="%{version}-%{release}"
if [ ! -d rpmbuilddir ]; then
  mkdir -p rpmbuilddir
fi
cd rpmbuilddir
conan install .. --profile=../dev/profiles/%{_target_cpu}

cmake \
  -DCMAKE_BUILD_TYPE=Debug \
  -DBUILD_SHARED_LIBS=OFF \
  -DCMAKE_INSTALL_PREFIX=/usr \
  -DCMAKE_VERBOSE_MAKEFILE=ON \
  -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
  -DSAILFISHOS=ON \
  -G "$GENERATOR" \
  ..
cd ..
cmake --build rpmbuilddir -- %{?_smp_mflags}


%install
#%%define _unpackaged_files_terminate_build 0

rm -rf %{buildroot}
DESTDIR=%{buildroot} cmake --build rpmbuilddir --target install
rm -rf \
  %{buildroot}%{_datadir}/knotifications5 \
  %{buildroot}%{_datadir}/kservicetypes5 \
  %{buildroot}%{_datadir}/qlogging-categories5 \
  %{buildroot}%{_datadir}/%{name}/lib/*.a
mkdir -p %{_bindir}

desktop-file-install --delete-original       \
  --dir %{buildroot}%{_datadir}/applications             \
   %{buildroot}%{_datadir}/applications/*.desktop

%files
%defattr(-,root,root,-)
%{_bindir}
%{_datadir}/%{name}/qml
%{_datadir}/%{name}/locale
%{_datadir}/applications/%{name}.desktop
%{_datadir}/icons/hicolor/*/apps/%{name}.png
